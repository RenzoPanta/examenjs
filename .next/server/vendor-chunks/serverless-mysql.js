"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
exports.id = "vendor-chunks/serverless-mysql";
exports.ids = ["vendor-chunks/serverless-mysql"];
exports.modules = {

/***/ "(rsc)/./node_modules/serverless-mysql/index.js":
/*!************************************************!*\
  !*** ./node_modules/serverless-mysql/index.js ***!
  \************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("\nconst NodeURL = __webpack_require__(/*! url */ \"url\");\n/**\n * This module manages MySQL connections in serverless applications.\n * More detail regarding the MySQL module can be found here:\n * https://github.com/mysqljs/mysql\n * @author Jeremy Daly <jeremy@jeremydaly.com>\n * @version 1.5.4\n * @license MIT\n */ module.exports = (params)=>{\n    // Mutable values\n    let client = null // Init null client object\n    ;\n    let counter = 0 // Total reuses counter\n    ;\n    let errors = 0 // Error count\n    ;\n    let retries = 0 // Retry count\n    ;\n    let _cfg = {} // MySQL config globals\n    ;\n    let _maxConns = {\n        updated: 0\n    } // Cache max connections\n    ;\n    let _usedConns = {\n        updated: 0\n    } // Cache used connections\n    ;\n    // Common Too Many Connections Errors\n    const tooManyConnsErrors = [\n        \"ER_TOO_MANY_USER_CONNECTIONS\",\n        \"ER_CON_COUNT_ERROR\",\n        \"ER_USER_LIMIT_REACHED\",\n        \"ER_OUT_OF_RESOURCES\",\n        \"PROTOCOL_CONNECTION_LOST\",\n        \"PROTOCOL_SEQUENCE_TIMEOUT\",\n        \"ETIMEDOUT\" // if the connection times out\n    ];\n    // Init setting values\n    let MYSQL, manageConns, cap, base, maxRetries, connUtilization, backoff, zombieMinTimeout, zombieMaxTimeout, maxConnsFreq, usedConnsFreq, onConnect, onConnectError, onRetry, onClose, onError, onKill, onKillError, PromiseLibrary;\n    /********************************************************************/ /**  HELPER/CONVENIENCE FUNCTIONS                                  **/ /********************************************************************/ const getCounter = ()=>counter;\n    const incCounter = ()=>counter++;\n    const resetCounter = ()=>counter = 0;\n    const getClient = ()=>client;\n    const resetClient = ()=>client = null;\n    const resetRetries = ()=>retries = 0;\n    const getErrorCount = ()=>errors;\n    const getConfig = ()=>_cfg;\n    const config = (args)=>{\n        if (typeof args === \"string\") {\n            return Object.assign(_cfg, uriToConnectionConfig(args));\n        }\n        return Object.assign(_cfg, args);\n    };\n    const delay = (ms)=>new PromiseLibrary((res)=>setTimeout(res, ms));\n    const randRange = (min, max)=>Math.floor(Math.random() * (max - min + 1)) + min;\n    const fullJitter = ()=>randRange(0, Math.min(cap, base * 2 ** retries));\n    const decorrelatedJitter = (sleep = 0)=>Math.min(cap, randRange(base, sleep * 3));\n    const uriToConnectionConfig = (connectionString)=>{\n        let uri = undefined;\n        try {\n            uri = new NodeURL.URL(connectionString);\n        } catch (error) {\n            throw new Error(\"Invalid data source URL provided\");\n        }\n        const extraFields = {};\n        for (const [name, value] of uri.searchParams){\n            extraFields[name] = value;\n        }\n        const database = uri.pathname && uri.pathname.startsWith(\"/\") ? uri.pathname.slice(1) : undefined;\n        const connectionFields = {\n            host: uri.hostname ? uri.hostname : undefined,\n            user: uri.username ? uri.username : undefined,\n            port: uri.port ? Number(uri.port) : undefined,\n            password: uri.password ? uri.password : undefined,\n            database\n        };\n        return Object.assign(connectionFields, extraFields);\n    };\n    /********************************************************************/ /**  CONNECTION MANAGEMENT FUNCTIONS                               **/ /********************************************************************/ // Public connect method, handles backoff and catches\n    // TOO MANY CONNECTIONS errors\n    const connect = async (wait)=>{\n        try {\n            await _connect();\n        } catch (e) {\n            if (tooManyConnsErrors.includes(e.code) && retries < maxRetries) {\n                retries++;\n                wait = Number.isInteger(wait) ? wait : 0;\n                let sleep = backoff === \"decorrelated\" ? decorrelatedJitter(wait) : typeof backoff === \"function\" ? backoff(wait, retries) : fullJitter();\n                onRetry(e, retries, sleep, typeof backoff === \"function\" ? \"custom\" : backoff) // fire onRetry event\n                ;\n                await delay(sleep).then(()=>connect(sleep));\n            } else {\n                onConnectError(e) // Fire onConnectError event\n                ;\n                throw new Error(e);\n            }\n        }\n    } // end connect\n    ;\n    // Internal connect method\n    const _connect = ()=>{\n        if (client === null) {\n            resetCounter() // Reset the total use counter\n            ;\n            // Return a new promise\n            return new PromiseLibrary((resolve, reject)=>{\n                // Connect to the MySQL database\n                client = MYSQL.createConnection(_cfg);\n                // Wait until MySQL is connected and ready before moving on\n                client.connect(function(err) {\n                    if (err) {\n                        resetClient();\n                        reject(err);\n                    } else {\n                        resetRetries();\n                        onConnect(client);\n                        return resolve(true);\n                    }\n                });\n                // Add error listener (reset client on failures)\n                client.on(\"error\", async (err)=>{\n                    errors++;\n                    resetClient() // reset client\n                    ;\n                    resetCounter() // reset counter\n                    ;\n                    onError(err) // fire onError event (PROTOCOL_CONNECTION_LOST)\n                    ;\n                });\n            }) // end promise\n            ;\n        // Else the client already exists\n        } else {\n            return PromiseLibrary.resolve();\n        } // end if-else\n    } // end _connect\n    ;\n    // Function called at the end that attempts to clean up zombies\n    // and maintain proper connection limits\n    const end = async ()=>{\n        if (client !== null && manageConns) {\n            incCounter() // increment the reuse counter\n            ;\n            // Check the number of max connections\n            let maxConns = await getMaxConnections();\n            // Check the number of used connections\n            let usedConns = await getTotalConnections();\n            // If over utilization threshold, try and clean up zombies\n            if (usedConns.total / maxConns.total > connUtilization) {\n                // Calculate the zombie timeout\n                let timeout = Math.min(Math.max(usedConns.maxAge, zombieMinTimeout), zombieMaxTimeout);\n                // Kill zombies if they are within the timeout\n                let killedZombies = timeout <= usedConns.maxAge ? await killZombieConnections(timeout) : 0;\n                // If no zombies were cleaned up, close this connection\n                if (killedZombies === 0) {\n                    quit();\n                }\n            // If zombies exist that are more than the max timeout, kill them\n            } else if (usedConns.maxAge > zombieMaxTimeout) {\n                await killZombieConnections(zombieMaxTimeout);\n            }\n        } // end if client\n    } // end end() method\n    ;\n    // Function that explicitly closes the MySQL connection.\n    const quit = ()=>{\n        if (client !== null) {\n            client.end() // Quit the connection.\n            ;\n            resetClient() // reset the client to null\n            ;\n            resetCounter() // reset the reuse counter\n            ;\n            onClose() // fire onClose event\n            ;\n        }\n    };\n    /********************************************************************/ /**  QUERY FUNCTIONS                                               **/ /********************************************************************/ // Main query function\n    const query = async function(...args) {\n        // Establish connection\n        await connect();\n        // Run the query\n        return new PromiseLibrary((resolve, reject)=>{\n            if (client !== null) {\n                // If no args are passed in a transaction, ignore query\n                if (this && this.rollback && args.length === 0) {\n                    return resolve([]);\n                }\n                client.query(...args, async (err, results)=>{\n                    if (err && err.code === \"PROTOCOL_SEQUENCE_TIMEOUT\") {\n                        client.destroy() // destroy connection on timeout\n                        ;\n                        resetClient() // reset the client\n                        ;\n                        reject(err) // reject the promise with the error\n                        ;\n                    } else if (err && (/^PROTOCOL_ENQUEUE_AFTER_/.test(err.code) || err.code === \"PROTOCOL_CONNECTION_LOST\" || err.code === \"EPIPE\" || err.code === \"ECONNRESET\")) {\n                        resetClient() // reset the client\n                        ;\n                        return resolve(query(...args)) // attempt the query again\n                        ;\n                    } else if (err) {\n                        if (this && this.rollback) {\n                            await query(\"ROLLBACK\");\n                            this.rollback(err);\n                        }\n                        reject(err);\n                    }\n                    return resolve(results);\n                });\n            }\n        });\n    } // end query\n    ;\n    // Get the max connections (either for this user or total)\n    const getMaxConnections = async ()=>{\n        // If cache is expired\n        if (Date.now() - _maxConns.updated > maxConnsFreq) {\n            let results = await query(`SELECT IF(@@max_user_connections > 0,\n        LEAST(@@max_user_connections,@@max_connections),\n        @@max_connections) AS total,\n        IF(@@max_user_connections > 0,true,false) AS userLimit`);\n            // Update _maxConns\n            _maxConns = {\n                total: results[0].total || 0,\n                userLimit: results[0].userLimit === 1 ? true : false,\n                updated: Date.now()\n            };\n        } // end if renewing cache\n        return _maxConns;\n    } // end getMaxConnections\n    ;\n    // Get the total connections being used and the longest sleep time\n    const getTotalConnections = async ()=>{\n        // If cache is expired\n        if (Date.now() - _usedConns.updated > usedConnsFreq) {\n            let results = await query(`SELECT COUNT(ID) as total, MAX(time) as max_age\n        FROM information_schema.processlist\n        WHERE (user = ? AND @@max_user_connections > 0) OR true`, [\n                _cfg.user\n            ]);\n            _usedConns = {\n                total: results[0].total || 0,\n                maxAge: results[0].max_age || 0,\n                updated: Date.now()\n            };\n        } // end if refreshing cache\n        return _usedConns;\n    } // end getTotalConnections\n    ;\n    // Kill all zombie connections that are older than the threshold\n    const killZombieConnections = async (timeout)=>{\n        let killedZombies = 0;\n        // Hunt for zombies (just the sleeping ones that this user owns)\n        let zombies = await query(`SELECT ID,time FROM information_schema.processlist\n        WHERE command = 'Sleep' AND time >= ? AND user = ?\n        ORDER BY time DESC`, [\n            !isNaN(timeout) ? timeout : 60 * 15,\n            _cfg.user\n        ]);\n        // Kill zombies\n        for(let i = 0; i < zombies.length; i++){\n            try {\n                await query(\"KILL ?\", zombies[i].ID);\n                onKill(zombies[i]) // fire onKill event\n                ;\n                killedZombies++;\n            } catch (e) {\n                // if (e.code !== 'ER_NO_SUCH_THREAD') console.log(e)\n                onKillError(e) // fire onKillError event\n                ;\n            }\n        } // end for\n        return killedZombies;\n    } // end killZombieConnections\n    ;\n    /********************************************************************/ /**  TRANSACTION MANAGEMENT                                        **/ /********************************************************************/ // Init a transaction object and return methods\n    const transaction = ()=>{\n        let queries = [] // keep track of queries\n        ;\n        let rollback = ()=>{} // default rollback event\n        ;\n        return {\n            query: function(...args) {\n                if (typeof args[0] === \"function\") {\n                    queries.push(args[0]);\n                } else {\n                    queries.push(()=>[\n                            ...args\n                        ]);\n                }\n                return this;\n            },\n            rollback: function(fn) {\n                if (typeof fn === \"function\") {\n                    rollback = fn;\n                }\n                return this;\n            },\n            commit: async function() {\n                return await commit(queries, rollback);\n            }\n        };\n    };\n    // Commit transaction by running queries\n    const commit = async (queries, rollback)=>{\n        let results = [] // keep track of results\n        ;\n        // Start a transaction\n        await query(\"START TRANSACTION\");\n        // Loop through queries\n        for(let i = 0; i < queries.length; i++){\n            // Execute the queries, pass the rollback as context\n            let result = await query.apply({\n                rollback\n            }, queries[i](results[results.length - 1], results));\n            // Add the result to the main results accumulator\n            results.push(result);\n        }\n        // Commit our transaction\n        await query(\"COMMIT\");\n        // Return the results\n        return results;\n    };\n    /********************************************************************/ /**  INITIALIZATION                                                **/ /********************************************************************/ const cfg = typeof params === \"object\" && !Array.isArray(params) ? params : {};\n    MYSQL = cfg.library || __webpack_require__(/*! mysql */ \"(rsc)/./node_modules/mysql/index.js\");\n    PromiseLibrary = cfg.promise || Promise;\n    // Set defaults for connection management\n    manageConns = cfg.manageConns === false ? false : true // default to true\n    ;\n    cap = Number.isInteger(cfg.cap) ? cfg.cap : 100 // default to 100 ms\n    ;\n    base = Number.isInteger(cfg.base) ? cfg.base : 2 // default to 2 ms\n    ;\n    maxRetries = Number.isInteger(cfg.maxRetries) ? cfg.maxRetries : 50 // default to 50 attempts\n    ;\n    backoff = typeof cfg.backoff === \"function\" ? cfg.backoff : cfg.backoff && [\n        \"full\",\n        \"decorrelated\"\n    ].includes(cfg.backoff.toLowerCase()) ? cfg.backoff.toLowerCase() : \"full\" // default to full Jitter\n    ;\n    connUtilization = !isNaN(cfg.connUtilization) ? cfg.connUtilization : 0.8 // default to 0.7\n    ;\n    zombieMinTimeout = Number.isInteger(cfg.zombieMinTimeout) ? cfg.zombieMinTimeout : 3 // default to 3 seconds\n    ;\n    zombieMaxTimeout = Number.isInteger(cfg.zombieMaxTimeout) ? cfg.zombieMaxTimeout : 60 * 15 // default to 15 minutes\n    ;\n    maxConnsFreq = Number.isInteger(cfg.maxConnsFreq) ? cfg.maxConnsFreq : 15 * 1000 // default to 15 seconds\n    ;\n    usedConnsFreq = Number.isInteger(cfg.usedConnsFreq) ? cfg.usedConnsFreq : 0 // default to 0 ms\n    ;\n    // Event handlers\n    onConnect = typeof cfg.onConnect === \"function\" ? cfg.onConnect : ()=>{};\n    onConnectError = typeof cfg.onConnectError === \"function\" ? cfg.onConnectError : ()=>{};\n    onRetry = typeof cfg.onRetry === \"function\" ? cfg.onRetry : ()=>{};\n    onClose = typeof cfg.onClose === \"function\" ? cfg.onClose : ()=>{};\n    onError = typeof cfg.onError === \"function\" ? cfg.onError : ()=>{};\n    onKill = typeof cfg.onKill === \"function\" ? cfg.onKill : ()=>{};\n    onKillError = typeof cfg.onKillError === \"function\" ? cfg.onKillError : ()=>{};\n    let connCfg = {};\n    if (typeof cfg.config === \"object\" && !Array.isArray(cfg.config)) {\n        connCfg = cfg.config;\n    } else if (typeof params === \"string\") {\n        connCfg = params;\n    }\n    let escape = MYSQL.escape;\n    let escapeId = MYSQL.escapeId;\n    let format = MYSQL.format;\n    // Set MySQL configs\n    config(connCfg);\n    // Return public methods\n    return {\n        connect,\n        config,\n        query,\n        end,\n        escape,\n        escapeId,\n        format,\n        quit,\n        transaction,\n        getCounter,\n        getClient,\n        getConfig,\n        getErrorCount\n    };\n} // end exports\n;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/serverless-mysql/index.js\n");

/***/ })

};
;